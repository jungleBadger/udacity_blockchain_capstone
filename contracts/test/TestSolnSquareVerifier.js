// Test if a new solution can be added for contract - SolnSquareVerifier

// Test if an ERC721 token can be minted for contract - SolnSquareVerifier
// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var verifier = artifacts.require('SquareVerifier');
var solnSquareVerifier = artifacts.require('SolnSquareVerifier');
let proof = require("../../zokrates/code/square/proof");

contract('TestSolSquareVerifier', accounts => {
    
    let account = accounts[0];
    let account2 = accounts[1];
    

    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    describe('Test verification', function () {
        beforeEach(async function () { 
            try{
                let verifierContract = await verifier.new({from: account});
                this.contract = await solnSquareVerifier.new(verifierContract.address, {from: account});
            }
            catch(e)
            {
                console.log(e);
            }
        });
        
        //Mint tokens. Also tests addSolution
        it('Successfully mint token', async function () { 
            
            let revert = false;
            try{
                await this.contract.mintVerified(
                    account2, 
                    1,
                    proof.proof.A, 
                    proof.proof.A_p, 
                    proof.proof.B, 
                    proof.proof.B_p, 
                    proof.proof.C, 
                    proof.proof.C_p, 
                    proof.proof.H, 
                    proof.proof.K, 
                    proof.input,
                    {from: account})
            }catch(e) {
                revert = true;
                console.log(e);
            }
        
            assert.equal(revert, false, 'Unable to mint token') ;
        });

        //Try to mint a token with the same tokenId
        it('Mint token with same solution', async function () { 
            //Mint with solution once
            await this.contract.mintVerified(account2, 
                1,
                proof.proof.A, 
                proof.proof.A_p, 
                proof.proof.B, 
                proof.proof.B_p, 
                proof.proof.C, 
                proof.proof.C_p, 
                proof.proof.H, 
                proof.proof.K, 
                proof.input,
                {from: account});
            //Try miniting again with the same solution
            let revert = false;
            try {
                await this.contract.mintVerified(account2, 
                    1,
                    proof.proof.A, 
                    proof.proof.A_p, 
                    proof.proof.B, 
                    proof.proof.B_p, 
                    proof.proof.C, 
                    proof.proof.C_p, 
                    proof.proof.H, 
                    proof.proof.K, 
                    proof.input,
                    {from: account});
            } catch (e) {
                revert = true;
            }
            assert.equal(revert, true, "Minting with the same solution not allowed");
      });
    });
}) ;

